type Place @aws_iam @aws_api_key {
  id: ID!
  title: String
  description: String
  category: String
  image: String
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPlaceConnection @aws_api_key @aws_iam {
  items: [Place]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelPlaceFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  category: ModelStringInput
  image: ModelStringInput
  and: [ModelPlaceFilterInput]
  or: [ModelPlaceFilterInput]
  not: ModelPlaceFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getPlace(id: ID!): Place @aws_api_key @aws_iam
  listPlaces(filter: ModelPlaceFilterInput, limit: Int, nextToken: String): ModelPlaceConnection @aws_api_key @aws_iam
  syncPlaces(filter: ModelPlaceFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPlaceConnection @aws_api_key @aws_iam
}

input CreatePlaceInput {
  id: ID
  title: String
  description: String
  category: String
  image: String
  _version: Int
}

input UpdatePlaceInput {
  id: ID!
  title: String
  description: String
  category: String
  image: String
  _version: Int
}

input DeletePlaceInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPlace(input: CreatePlaceInput!, condition: ModelPlaceConditionInput): Place @aws_api_key @aws_iam
  updatePlace(input: UpdatePlaceInput!, condition: ModelPlaceConditionInput): Place @aws_api_key @aws_iam
  deletePlace(input: DeletePlaceInput!, condition: ModelPlaceConditionInput): Place @aws_api_key @aws_iam
}

input ModelPlaceConditionInput {
  title: ModelStringInput
  description: ModelStringInput
  category: ModelStringInput
  image: ModelStringInput
  and: [ModelPlaceConditionInput]
  or: [ModelPlaceConditionInput]
  not: ModelPlaceConditionInput
}

type Subscription {
  onCreatePlace: Place @aws_subscribe(mutations: ["createPlace"]) @aws_api_key @aws_iam
  onUpdatePlace: Place @aws_subscribe(mutations: ["updatePlace"]) @aws_api_key @aws_iam
  onDeletePlace: Place @aws_subscribe(mutations: ["deletePlace"]) @aws_api_key @aws_iam
}
